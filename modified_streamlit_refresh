import { Streamlit, RenderData } from "streamlit-component-lib";

function counter(): () => number {
  let count = 0;
  return function (): number {
    count += 1;
    return count;
  }
}

class ArgsCheck {
  limit: number | null = null;
  interval: number | null = null;
  key: string | null = null;

  setLimit(limit: number | null) {
    const hasChanged = limit !== this.limit;
    this.limit = limit;
    return hasChanged;
  }

  setInterval(intervalTime: number) {
    const hasChanged = intervalTime !== this.interval;
    this.interval = intervalTime;
    return hasChanged;
  }

  setKey(key: string | null) {
    const hasChanged = key !== this.key;
    this.key = key;
    return hasChanged;
  }
}

const refreshCounter = counter();
const argsChecker = new ArgsCheck();
let interval: number;
let timeout: number;

/**
 * Sync to the start of the next time unit (e.g., minute).
 */
function getMillisecondsToNextTimeUnit(unitInMilliseconds: number): number {
  const now = new Date();
  const msPastUnit = now.getTime() % unitInMilliseconds;
  return unitInMilliseconds - msPastUnit;
}

/**
 * The component's render function. This will be called immediately after
 * the component is initially loaded, and then again every time the
 * component gets new data from Python.
 */
function onRender(event: Event): void {
  document.body.innerHTML = "";
  // Get the RenderData from the event
  const data = (event as CustomEvent<RenderData>).detail;
  const refreshLimit = data.args.limit ? parseInt(data.args.limit, 10) : null;
  const refreshInterval = parseInt(data.args.interval, 10);
  const shouldReset = argsChecker.setInterval(refreshInterval) ||
    argsChecker.setKey(data.args.key) || argsChecker.setLimit(refreshLimit);

  if (interval) {
    if (data.args.debounce || shouldReset) {
      clearInterval(interval);
      clearTimeout(timeout);
    } else {
      // We already have an interval so clear the screen.
      return;
    }
  }

  // Calculate milliseconds to the next time unit (e.g., minute)
  const msToNextMinute = getMillisecondsToNextTimeUnit(60 * 1000);

  timeout = window.setTimeout(() => {
    interval = window.setInterval(() => {
      const newCount = Math.min(refreshCounter(), Number.MAX_SAFE_INTEGER);
      if (!refreshLimit || newCount < refreshLimit) {
        Streamlit.setComponentValue(newCount);
      } else {
        clearInterval(interval);
      }
    }, refreshInterval);

    // Immediately trigger the first refresh
    const newCount = Math.min(refreshCounter(), Number.MAX_SAFE_INTEGER);
    if (!refreshLimit || newCount < refreshLimit) {
      Streamlit.setComponentValue(newCount);
    } else {
      clearInterval(interval);
    }
  }, msToNextMinute);
}

// Attach our `onRender` handler to Streamlit's render event.
Streamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender);

// Tell Streamlit we're ready to start receiving data. We won't get our
// first RENDER_EVENT until we call this function.
Streamlit.setComponentReady();

// Finally, tell Streamlit to update our initial height.
Streamlit.setFrameHeight(0);
